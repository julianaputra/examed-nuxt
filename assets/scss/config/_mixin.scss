@use 'sass:math';
@use 'sass:map';
@use 'sass:list';
@use '_variable.scss' as var;
@use '_function.scss' as func;

// |‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾| //
// | tmdrMIX v.2.0.4                         | //
// | last update : 03 / 04 / 2024            | //
// |_________________________________________| //

// transform with fallback
@mixin transform($declaration) {
    -webkit-transform: #{$declaration};
    -moz-transform: #{$declaration};
    -ms-transform: #{$declaration};
    -o-transform: #{$declaration};
    transform: #{$declaration};
}

// transition with fallback
@mixin transition($option) {
    -webkit-transition: #{$option};
    -moz-transition: #{$option};
    -ms-transition: #{$option};
    -o-transition: #{$option};
    transition: #{$option};
}

// display flex with fallback
@mixin displayFlex {
    display: block;
    display: -webkit-box;
    display: -webkit-flex;
    display: -ms-flexbox;
    display: flex;
}

// make ratio classes
@mixin imageRatio(
    $imageWidth,
    $imageHeight,
    $maxWidth: false,
    $objectFit: cover,
    $className: 'image'
) {
    &__#{$className}-container {
        position: relative;
        width: 100%;
        @if ($maxWidth) {
            display: inline-block;
            @if ($maxWidth == true) {
                @include vwUnit(max-width, $imageWidth);
            } @else {
                @include vwUnit(max-width, $maxWidth);
            }
        } @else {
            display: block;
        }
        &:before {
            content: '';
            display: block;
            padding-top: math.div($imageHeight, $imageWidth) * 100%;
        }

        .ratio-item {
            object-fit: $objectFit;
        }
    }
}

// element state mixin
@mixin fullState {
    &:hover,
    &:active,
    &:focus,
    &:active:hover,
    &:active:focus {
        @content;
    }
}

// responsive Font Size

// -- responsice font size component -- start
@mixin printOtherProp($fontName, $breakpoint) {
    @each $property, $value in map.get(var.$fontSizes, $fontName, $breakpoint) {
        @if ($property != font-size) {
            #{$property}: $value;
        }
    }
}

@mixin elypsisDefaultProp {
    display: block; // Fallback for non-webkit
    display: -webkit-box;
    -webkit-box-orient: vertical;
    overflow: hidden;
    text-overflow: ellipsis;
}

@mixin elypsisProperty(
    $fontName,
    $fontSize,
    $line-to-show,
    $line-height,
    $breakpoint
) {
    $breakpointValue: null;
    @if ($breakpoint == desktop) {
        $breakpointValue: 1920;
    }
    height: func.unit(
        $fontSize * $line-height * $line-to-show,
        $breakpointValue
    );
    line-height: $line-height;
    -webkit-line-clamp: $line-to-show;

    @each $property,
        $value in map.get(var.$fontSizes, $fontName, $breakpointValue)
    {
        @if ($property != 'font-size' and $property != 'line-height') {
            @if ($property != font-size) {
                #{$property}: $value;
            }
        }
    }
}

@mixin elypsisResProp(
    $elypsis,
    $fontName,
    $line-height,
    $line-to-show,
    $breakpoint
) {
    $elypFS: null;
    $elypLH: null;

    @if ($elypsis == true) {
        // get font-size
        @if (map.get(var.$fontSizes, $fontName, $breakpoint, font-size)) {
            $elypFS: map.get(var.$fontSizes, $fontName, $breakpoint, font-size);
        } @else {
            @if ($breakpoint > list.nth(var.$mobileBreakpoints, 1)) {
                $elypFS: map.get(var.$fontSizes, $fontName, desktop, font-size);
            } @else {
                $elypFS: map.get(var.$fontSizes, $fontName, mobile, font-size);
            }
        }

        // get line-heigt
        @if (map.get(var.$fontSizes, $fontName, $breakpoint, line-height)) {
            $elypLH: map.get(
                var.$fontSizes,
                $fontName,
                $breakpoint,
                line-height
            );
        } @else if
            (
                map.get(var.$fontSizes, $fontName, $breakpoint, line-height) ==
                    null
            )
        {
            @if (
                $breakpoint <=
                    list.nth(var.$mobileBreakpoints, 1) and
                    map.get(var.$fontSizes, $fontName, mobile, line-height)
            ) {
                $elypLH: map.get(
                    var.$fontSizes,
                    $fontName,
                    mobile,
                    line-height
                );
            } @else if
                (map.get(var.$fontSizes, $fontName, desktop, line-height))
            {
                $elypLH: map.get(
                    var.$fontSizes,
                    $fontName,
                    desktop,
                    line-height
                );
            } @else {
                $elypLH: $line-height;
            }
        }

        // @debug $elypFS;
        // @debug $elypLH;
        // @debug $line-to-show;
        // @debug $elypFS * $elypLH * $line-to-show;

        height: func.unit($elypFS * $elypLH * $line-to-show, $breakpoint);
    }
}
// -- responsice font size component -- end

@mixin typo($fontName, $elypsis: false, $line-to-show: 1, $line-height: 1.6) {
    font-size: var(--tdfs-#{$fontName});

    @each $breakpoint in var.$desktopBreakpoints {
        @if ($breakpoint == 1920) {
            $breakpointMap: desktop;

            @if ($elypsis == true) {
                @include elypsisDefaultProp;

                $elypFS: map.get(var.$fontSizes, $fontName, desktop, font-size);
                $elypLH: null;

                @if (map.get(var.$fontSizes, $fontName, desktop, line-height)) {
                    $elypLH: map.get(
                        var.$fontSizes,
                        $fontName,
                        desktop,
                        line-height
                    );
                } @else {
                    $elypLH: $line-height;
                }

                @include elypsisProperty(
                    $fontName,
                    $elypFS,
                    $line-to-show,
                    $elypLH,
                    $breakpointMap
                );
            } @else {
                @include printOtherProp($fontName, desktop);
            }
        } @else {
            @media (max-width: #{$breakpoint}px) {
                @include elypsisResProp(
                    $elypsis,
                    $fontName,
                    $line-height,
                    $line-to-show,
                    $breakpoint
                );

                @if (map.get(var.$fontSizes, $fontName, $breakpoint)) {
                    @include printOtherProp($fontName, $breakpoint);
                }
            }
        }
    }

    @each $breakpoint in var.$mobileBreakpoints {
        @media (max-width: #{$breakpoint}px) {
            @if ($breakpoint == list.nth(var.$mobileBreakpoints, 1)) {
                @include elypsisResProp(
                    $elypsis,
                    $fontName,
                    $line-height,
                    $line-to-show,
                    $breakpoint
                );

                @each $property,
                    $value in map.get(var.$fontSizes, $fontName, mobile)
                {
                    @if ($property != font-size) {
                        @if (
                            map.get(
                                var.$fontSizes,
                                $fontName,
                                $breakpoint,
                                $property
                            )
                        ) {
                            $value: map.get(
                                var.$fontSizes,
                                $fontName,
                                $breakpoint,
                                $property
                            );
                        }
                        #{$property}: $value;
                    }
                }
            } @else {
                @include elypsisResProp(
                    $elypsis,
                    $fontName,
                    $line-height,
                    $line-to-show,
                    $breakpoint
                );

                @include printOtherProp($fontName, $breakpoint);
            }
        }
    }
}

// print font-size as root variable
@mixin fontVar() {
    @each $breakpoint in var.$desktopBreakpoints {
        @if ($breakpoint == 1920) {
            @each $fontName, $value in var.$fontSizes {
                --tdfs-#{$fontName}: #{func.unit(
                        map.get($value, desktop, font-size),
                        1920
                    )};
            }
        } @else {
            @media (max-width: #{$breakpoint}px) {
                $breakValue: null;
                @each $fontName, $value in var.$fontSizes {
                    @if (
                        map.get(
                            var.$fontSizes,
                            $fontName,
                            $breakpoint,
                            font-size
                        )
                    ) {
                        $breakValue: $breakpoint;
                    } @else {
                        $breakValue: desktop;
                    }
                    --tdfs-#{$fontName}: #{func.unit(
                            map.get($value, $breakValue, font-size),
                            $breakpoint
                        )};
                }
            }
        }
    }
    @each $breakpoint in var.$mobileBreakpoints {
        @media (max-width: #{$breakpoint}px) {
            $breakValue: null;
            @each $fontName, $value in var.$fontSizes {
                @if (
                    map.get(var.$fontSizes, $fontName, $breakpoint, font-size)
                ) {
                    $breakValue: $breakpoint;
                } @else {
                    $breakValue: mobile;
                }
                --tdfs-#{$fontName}: #{func.unit(
                        map.get($value, $breakValue, font-size),
                        $breakpoint
                    )};
            }
        }
    }
}

// responsive VW unit
@mixin vwDesktop($property, $value) {
    @each $breakpoint in var.$desktopBreakpoints {
        @if ($breakpoint == 1920) {
            #{$property}: func.unit($value, $breakpoint);
        } @else {
            @media screen and (max-width: #{$breakpoint}px) {
                #{$property}: func.unit($value, $breakpoint);
            }
        }
    }
}
@mixin vwMobile($property, $value) {
    @each $breakpoint in var.$mobileBreakpoints {
        @media screen and (max-width: #{$breakpoint}px) {
            #{$property}: func.unit($value, $breakpoint);
        }
    }
}
@mixin vwUnit($property, $valueD, $valueM: null) {
    @if ($valueM == null) {
        $valueM: $valueD;
    }

    @include vwDesktop($property, $valueD);
    @include vwMobile($property, $valueM);
}
