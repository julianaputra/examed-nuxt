@use 'sass:math';
@use 'sass:map';
@use '_variable.scss' as var;
@use '_function.scss' as func;

// |‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾| //
// | tmdrMIX v.1.3.0                         | //
// | last update : 19 / 03 / 2024            | //
// |_________________________________________| //

// transform with fallback
@mixin transform($declaration) {
    -webkit-transform: #{$declaration};
    -moz-transform: #{$declaration};
    -ms-transform: #{$declaration};
    -o-transform: #{$declaration};
    transform: #{$declaration};
}

// transition with fallback
@mixin transition($option) {
    -webkit-transition: #{$option};
    -moz-transition: #{$option};
    -ms-transition: #{$option};
    -o-transition: #{$option};
    transition: #{$option};
}

// display flex with fallback
@mixin displayFlex {
    display: block;
    display: -webkit-box;
    display: -webkit-flex;
    display: -ms-flexbox;
    display: flex;
}

// make ratio classes
@mixin imageRatio($imageWidth, $imageHeight, $maxWidth: false, $objectFit: cover, $className : 'image') {
    &__#{$className}-container {
        position: relative;
        width: 100%;
        @if ( $maxWidth ) {
            display: inline-block;
            @if ( $maxWidth == true ) {
                @include vwUnit(max-width, $imageWidth);
            } @else {
                @include vwUnit(max-width, $maxWidth);
            }
        } @else {
            display: block;
        }
        &:before {
            content: "";
            display: block;
            padding-top: math.div($imageHeight, $imageWidth) * 100%;
        }

        .ratio-item {
            object-fit: $objectFit;
        }
    }
}

// text elypsis mixin
@mixin elypsis($fontName, $lines-to-show: 1, $line-height : 1.4) {

    display: block; // Fallback for non-webkit
    display: -webkit-box;
    -webkit-box-orient: vertical;
    overflow: hidden;
    text-overflow: ellipsis;
    
    @each $breakpoint, $value in map.get(var.$fontSizes,$fontName) {
        @if ( $breakpoint == 'default' ) {
            $font-size : map.get(var.$f1ontSizes, $fontName, default, font-size);
            @if ( map.get(var.$fontSizes, $fontName, default, line-height) ) {
                $line-height: map.get(var.$fontSizes, $fontName, default, line-height);
            };

            height: #{$font-size*$line-height*$lines-to-show}px; // Fallback for non-webkit
            font-size: #{$font-size}px;
            line-height: $line-height;
            -webkit-line-clamp: $lines-to-show;
        }
        @else {
            @media screen and (max-width: #{$breakpoint}px ) {
                $font-size : map.get(var.$fontSizes, $fontName, $breakpoint, font-size);
                @if ( map.get(var.$fontSizes, $fontName, $breakpoint, line-height) ) {
                    $line-height: map.get(var.$fontSizes, $fontName, $breakpoint, line-height);
                };
    
                height: #{$font-size*$line-height*$lines-to-show}px; // Fallback for non-webkit
                font-size: #{$font-size}px;
                line-height: $line-height;
                -webkit-line-clamp: $lines-to-show;
            }
        }
    }
};

// element state mixin
@mixin fullState {
    &:hover, &:active, &:focus, &:active:hover, &:active:focus {
        @content;
    }
}

// mixin used inside fontSize, to help print propertuy from map
@mixin printProperty($property, $value, $breakpoint) {
    @if ($property == 'font-size') {
        font-size: func.unit($value, $breakpoint);
    }
    @else {
        #{$property} : #{$value};
    }
}

// responsive Font Size
@mixin typo($fontName) {

    @each $breakpoint in var.$desktopBreakpoints {
        @if ( $breakpoint == 1920 ) {
            @each $property, $value in map.get(var.$fontSizes, $fontName, desktop) {
                @include printProperty($property, $value, $breakpoint);
            }
        }
        @else {
            @media screen and (max-width: #{$breakpoint}px) {
                $mapData: null;
                @if ( map.get(var.$fontSizes, $fontName, $breakpoint) ) {
                    $mapData: map.get(var.$fontSizes, $fontName, $breakpoint)
                }
                @else {
                    $mapData: map.get(var.$fontSizes, $fontName, desktop)
                }
                @each $property, $value in $mapData {
                    @include printProperty($property, $value, $breakpoint);
                }
            }
        }
    }

    @each $breakpoint in var.$mobileBreakpoints {
        @media screen and (max-width: #{$breakpoint}px) {
            $mapData: null;
            @if ( map.get(var.$fontSizes, $fontName, $breakpoint) ) {
                $mapData: map.get(var.$fontSizes, $fontName, $breakpoint)
            }
            @else {
                $mapData: map.get(var.$fontSizes, $fontName, mobile)
            }
            @each $property, $value in $mapData {
                @include printProperty($property, $value, $breakpoint);
            }
        }
    }
}

// responsive VW unit
@mixin vwDesktop($property, $value) {
    
    @each $breakpoint in var.$desktopBreakpoints {
        @if ( $breakpoint == 1920 ) {
            #{$property}: func.unit($value, $breakpoint);
        }
        @else {
            @media screen and (max-width: #{$breakpoint}px) {
                #{$property}: func.unit($value, $breakpoint);
            }
        }
    }

}
@mixin vwMobile($property, $value) {

    @each $breakpoint in var.$mobileBreakpoints {
        @media screen and (max-width: #{$breakpoint}px) {
            #{$property}: func.unit($value, $breakpoint);
        }
    }

}
@mixin vwUnit($property, $valueD, $valueM: null) {

    @if ( $valueM == null ) {
        $valueM: $valueD;
    }

    @include vwDesktop($property, $valueD);
    @include vwMobile($property, $valueM);

}