@use 'sass:math';
@use 'sass:map';
@use '_variable.scss' as var;
@use '_function.scss' as func;

// |‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾| //
// | tmdrMIX v.2.0.2                         | //
// | last update : 25 / 03 / 2024            | //
// |_________________________________________| //

// transform with fallback
@mixin transform($declaration) {
    -webkit-transform: #{$declaration};
    -moz-transform: #{$declaration};
    -ms-transform: #{$declaration};
    -o-transform: #{$declaration};
    transform: #{$declaration};
}

// transition with fallback
@mixin transition($option) {
    -webkit-transition: #{$option};
    -moz-transition: #{$option};
    -ms-transition: #{$option};
    -o-transition: #{$option};
    transition: #{$option};
}

// display flex with fallback
@mixin displayFlex {
    display: block;
    display: -webkit-box;
    display: -webkit-flex;
    display: -ms-flexbox;
    display: flex;
}

// make ratio classes
@mixin imageRatio($imageWidth, $imageHeight, $maxWidth: false, $objectFit: cover, $className : 'image') {
    &__#{$className}-container {
        position: relative;
        width: 100%;
        @if ( $maxWidth ) {
            display: inline-block;
            @if ( $maxWidth == true ) {
                @include vwUnit(max-width, $imageWidth);
            } @else {
                @include vwUnit(max-width, $maxWidth);
            }
        } @else {
            display: block;
        }
        &:before {
            content: "";
            display: block;
            padding-top: math.div($imageHeight, $imageWidth) * 100%;
        }

        .ratio-item {
            object-fit: $objectFit;
        }
    }
}

// element state mixin
@mixin fullState {
    &:hover, &:active, &:focus, &:active:hover, &:active:focus {
        @content;
    }
}

// mixin used inside fontSize, to help print propertuy from map
@mixin printProperty($property, $value, $breakpoint) {
    @if ($property != 'font-size') {
        #{$property} : #{$value};
    }
}

@mixin elypsisProperty($fontName, $fontSize, $line-to-show, $line-height, $breakpoint) {
    
    height: func.unit( $fontSize * $line-height * $line-to-show, $breakpoint );
    font-size: var(--tdfs-#{$fontName});
    line-height: $line-height;
    -webkit-line-clamp: $line-to-show;

    @each $property, $value in map.get(var.$fontSizes, $fontName, desktop) {
        @if ( $property != 'font-size' and $property != 'line-height' ) {
            @include printProperty($property, $value, $breakpoint);
        }
    }
    
}

// responsive Font Size
@mixin typo($fontName, $elypsis: false, $line-to-show: 1, $line-height: 1.6) {

    @if ( $elypsis == true ) {
        display: block; // Fallback for non-webkit
        display: -webkit-box;
        -webkit-box-orient: vertical;
        overflow: hidden;
        text-overflow: ellipsis;

        $elypFontSize: null;
        $elypLineHeight: null;

        @each $breakpoint in var.$desktopBreakpoints {
            @if ( $breakpoint == 1920 ) {

                $elypFontSize: map.get(var.$fontSizes, $fontName, desktop, font-size);

                @if ( map.get(var.$fontSizes, $fontName, desktop, line-height) ) {
                    $elypLineHeight: map.get(var.$fontSizes, $fontName, desktop, line-height);
                }
                @else {
                    $elypLineHeight: $line-height;
                }

                @include elypsisProperty($fontName, $elypFontSize, $line-to-show, $elypLineHeight, $breakpoint);

            }
            @else {
                @media screen and (max-width: #{$breakpoint}px) {
                    $mapData: null;
                    @if ( map.get(var.$fontSizes, $fontName, $breakpoint) ) {
                        $mapData: map.get(var.$fontSizes, $fontName, $breakpoint)
                    }
                    @else {
                        $mapData: map.get(var.$fontSizes, $fontName, desktop)
                    }

                    $fontSize: map.get($mapData, font-size);

                    height: func.unit( $fontSize * $line-to-show * $elypLineHeight, $breakpoint );
                }
            }
        }

        @each $breakpoint in var.$mobileBreakpoints {
            @media screen and (max-width: #{$breakpoint}px) {
                $mapData: null;
                @if ( map.get(var.$fontSizes, $fontName, $breakpoint) ) {
                    $mapData: map.get(var.$fontSizes, $fontName, $breakpoint)
                }
                @else {
                    $mapData: map.get(var.$fontSizes, $fontName, mobile)
                }

                $fontSize: map.get($mapData, font-size);

                height: func.unit( $fontSize * $line-to-show * $elypLineHeight, $breakpoint );
            }
        }

    }
    @else {

        @each $breakpoint in var.$desktopBreakpoints {
            @if ( $breakpoint == 1920 ) {
                
                font-size: var(--tdfs-#{$fontName});
                @each $property, $value in map.get(var.$fontSizes, $fontName, desktop) {
                    @include printProperty($property, $value, $breakpoint);
                }
            }
            @else {
                @media screen and (max-width: #{$breakpoint}px) {
                    $mapData: null;
                    @if ( map.get(var.$fontSizes, $fontName, $breakpoint) ) {
                        $mapData: map.get(var.$fontSizes, $fontName, $breakpoint)
                    }
                    @else {
                        $mapData: map.get(var.$fontSizes, $fontName, desktop)
                    }
                    
                    @each $property, $value in $mapData {
                        @include printProperty($property, $value, $breakpoint);
                    }
                }
            }
        }
    
        @each $breakpoint in var.$mobileBreakpoints {
            @media screen and (max-width: #{$breakpoint}px) {
                $mapData: null;
                @if ( map.get(var.$fontSizes, $fontName, $breakpoint) ) {
                    $mapData: map.get(var.$fontSizes, $fontName, $breakpoint)
                }
                @else {
                    $mapData: map.get(var.$fontSizes, $fontName, mobile)
                }
                @each $property, $value in $mapData {
                    @include printProperty($property, $value, $breakpoint);
                }
            }
        }
    }
}

// print font-size as root variable
@mixin fontVar() {
    @each $breakpoint in var.$desktopBreakpoints {
        @if ( $breakpoint == 1920 ) {
            @each $fontName, $value in var.$fontSizes {
                --tdfs-#{$fontName}: #{ func.unit( map.get($value, desktop, font-size), 1920) };
            }
        }
        @else {
            @media (max-width: #{$breakpoint}px) {
                $breakValue: null;
                @each $fontName, $value in var.$fontSizes {
                    @if ( map.get( var.$fontSizes, $fontName, $breakpoint ) ) {
                        $breakValue: $breakpoint;
                    }
                    @else {
                        $breakValue: desktop;
                    }
                    --tdfs-#{$fontName}: #{ func.unit( map.get($value, $breakValue, font-size), $breakpoint) };
                }
            }
        }
    }
    @each $breakpoint in var.$mobileBreakpoints {
        @media (max-width: #{$breakpoint}px) {
            $breakValue: null;
            @each $fontName, $value in var.$fontSizes {
                @if ( map.get( var.$fontSizes, $fontName, $breakpoint ) ) {
                    $breakValue: $breakpoint;
                }
                @else {
                    $breakValue: mobile;
                }
                --tdfs-#{$fontName}: #{ func.unit( map.get($value, $breakValue, font-size), $breakpoint) };
            }
        }
    }
}

// responsive VW unit
@mixin vwDesktop($property, $value) {
    
    @each $breakpoint in var.$desktopBreakpoints {
        @if ( $breakpoint == 1920 ) {
            #{$property}: func.unit($value, $breakpoint);
        }
        @else {
            @media screen and (max-width: #{$breakpoint}px) {
                #{$property}: func.unit($value, $breakpoint);
            }
        }
    }

}
@mixin vwMobile($property, $value) {

    @each $breakpoint in var.$mobileBreakpoints {
        @media screen and (max-width: #{$breakpoint}px) {
            #{$property}: func.unit($value, $breakpoint);
        }
    }

}
@mixin vwUnit($property, $valueD, $valueM: null) {

    @if ( $valueM == null ) {
        $valueM: $valueD;
    }

    @include vwDesktop($property, $valueD);
    @include vwMobile($property, $valueM);

}